#!/usr/bin/env bash

set -euf -o pipefail

readonly NIX_DIR="${NIX_DIR:-/home/jdb/nix}"
readonly INCLUDE_ENVRC="${INCLUDE_ENVRC:-0}"
OWNER="$(basename "$(dirname "$(pwd)")")"
readonly OWNER
REPO="$(basename "$(pwd)")"
readonly REPO

# Idempotent 'git init'.
function git_init() {
  if [[ ! -d ".git" ]]; then
    git init
  fi
}

function nix_init() {
  if [[ "${NIX_DIR}" != "." ]]; then
    mkdir -p "${NIX_DIR}"/"${OWNER}"/"${REPO}"
    pushd "${NIX_DIR}"/"${OWNER}"/"${REPO}"
  fi

  git_init

  cat <<EOF >flake.nix
{
  description = "${REPO} shell development tooling";

  inputs.nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
  inputs.flake-utils.url = "github:numtide/flake-utils";

  outputs = { self, nixpkgs, flake-utils }:
    (flake-utils.lib.eachDefaultSystem (system:
      let pkgs = import nixpkgs { inherit system; };
      in { devShell = import ./shell.nix { inherit pkgs; }; }));
}
EOF

  cat <<EOF >shell.nix
{ pkgs ? import <nixpkgs> }:

with pkgs;
mkShell {
  buildInputs = [ hello ];
  shellHook = ''
    # ...
  '';
}
EOF

  git add shell.nix flake.nix
  git commit -sS -m "Add initial flakes support"

  if [[ "${NIX_DIR}" != "." ]]; then
    popd
    cat <<EOF >.envrc
NIX_DIR=${NIX_DIR}/${OWNER}/${REPO}
use_flake() {
  watch_file \${NIX_DIR}/shell.nix
  watch_file \${NIX_DIR}/flake.nix
  watch_file \${NIX_DIR}/flake.lock
  eval "\$(cd \${NIX_DIR} && nix print-dev-env --profile flake-profile)"
}

use_flake
EOF
  else
    cat <<EOF >.envrc
use_flake() {
  watch_file shell.nix
  watch_file flake.nix
  watch_file flake.lock
  eval "\$(nix print-dev-env --profile flake-profile)"
}

use_flake
EOF
  fi

}

nix_init
direnv allow
direnv reload
if [[ "${INCLUDE_ENVRC}" == 0 ]]; then
  mkdir -p .git/info
  echo ".envrc" >>.git/info/exclude
else
  git add .envrc
fi

echo "/flake-profile*" >>.gitignore
git add .gitignore
git commit -asS
