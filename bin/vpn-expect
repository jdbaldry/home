#!/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Aug  5 10:48:45 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
        }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn nmcli conn up ODC --ask
match_max 100000
expect -exact "POST https://vpn1.datalogix.com/\r
Connected to 38.142.4.226:443\r
SSL negotiation with vpn1.datalogix.com\r
Connected to HTTPS on vpn1.datalogix.com\r
XML POST enabled\r
Use of the Oracle network and applications is intended solely for Oracle's authorized users. The use of these resources by Oracle employees and contractors is subject to company policies, including the Code of Conduct, Acceptable Use Policy and Information Protection Policy; access may be monitored and logged, to the extent permitted by law, in accordance with Oracle policies. Unauthorized access or use may result in termination of your access, disciplinary action and/or civil and
criminal penalties. Further information about Oracle security and privacy policies is available at the GIS Policy Portal.\r
GROUP: \[odc-admin|odc-dh|odc-mfa-admin|odc-mfa-user|odc-test|odc-user|safenet\]:"
send -- "odc-user\r"
expect -exact "odc-user\r
POST https://vpn1.datalogix.com/\r
XML POST enabled\r
Use of the Oracle network and applications is intended solely for Oracle's authorized users. The use of these resources by Oracle employees and contractors is subject to company policies, including the Code of Conduct, Acceptable Use Policy and Information Protection Policy; access may be monitored and logged, to the extent permitted by law, in accordance with Oracle policies. Unauthorized access or use may result in termination of your access, disciplinary action and/or civil and
criminal penalties. Further information about Oracle security and privacy policies is available at the GIS Policy Portal.\r
Username:"
send -- "jack.baldry\r"
expect -exact "jack.baldry\r
Password:"
send -- "\r"
expect eof
